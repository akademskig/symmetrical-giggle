# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Cart {
  basePrice: Float!
  products: [CartProduct!]!
  totalPrice: Float!
}

type CartProduct {
  _id: ID!
  amount: Float!
  currency: Currency!
  name: String!
  price: Float!
  priceBase: PriceBase!
  type: ProductTypes!
}

enum Currency {
  EUR
}

type Customer {
  _id: ID!
  birthDate: String!
  cart: Cart!
  city: String!
  name: String!
  priceMatch: Float
  vehiclePower: Int!
  voucher: Int
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input GetAvailableProductsInput {
  customerId: ID!
}

type GetAvailableProductsResponse {
  _id: ID!
  amount: Float!
  currency: Currency!
  mandatory: Boolean
  name: String!
  priceBase: PriceBase!
  prices: [Price!]!
  type: ProductTypes!
}

type Mutation {
  cart(input: ToggleProductInput!): Cart!
  customer(input: SubmitCustomerDataInput!): Customer!
}

type Price {
  amount: Float!
  validFor: ValidFor
}

enum PriceBase {
  BASE_PRICE
  COVERAGES_TOTAL
  FIXED_PRICE
  TOTAL_PRICE
  VEHICLE_POWER
}

enum ProductTypes {
  BASE_COVERAGE
  COVERAGE
  DISCOUNT
  SURCHARGE
}

type Query {
  products(input: GetAvailableProductsInput!): [GetAvailableProductsResponse!]!
  test: String!
}

input SubmitCustomerDataInput {
  birthDate: DateTime!
  city: String!
  name: String!
  priceMatch: Float
  vehiclePower: Float!
  voucher: Float
}

input ToggleProductInput {
  customerId: ID!
  productId: ID!
}

type ValidFor {
  age: ValidForLimits
  cities: [String!]
  coverageAmount: ValidForLimits
  vehiclePower: ValidForLimits
}

type ValidForLimits {
  max: Float!
  min: Float
}